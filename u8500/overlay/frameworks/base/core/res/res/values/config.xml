<?xml version="1.0" encoding="utf-8"?>
<!--
/*
** Copyright 2009, The Android Open Source Project
**
** Licensed under the Apache License, Version 2.0 (the "License"); 
** you may not use this file except in compliance with the License. 
** You may obtain a copy of the License at 
**
**     http://www.apache.org/licenses/LICENSE-2.0 
**
** Unless required by applicable law or agreed to in writing, software 
** distributed under the License is distributed on an "AS IS" BASIS, 
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
** See the License for the specific language governing permissions and 
** limitations under the License.
*/
-->

<!-- These resources are around just to allow their values to be customized
     for different hardware and product builds. -->
<resources>
    <!-- Flag indicating whether the surface flinger has limited
         alpha compositing functionality in hardware.  If set, the window
         manager will disable alpha trasformation in animations where not
         strictly needed. -->
    <bool name="config_sf_limitedAlpha">false</bool>

    <!-- Flag indicating whether the surface flinger is inefficient
         at performing a blur.  Used by parts of the UI to turn off
         the blur effect where it isn't worth the performance hit. -->
    <bool name="config_sf_slowBlur">true</bool>

    <!-- Indicate whether the SD card is accessible without removing the battery. -->
    <bool name="config_batterySdCardAccessibility">true</bool>

    <!-- If this is true, the screen will fade off.亮度逐渐衰减 -->
    <bool name="config_animateScreenLights">true</bool>

    <!-- Indicate whether the SD card is accessible without removing the battery.卡在没有拿出电池的时候可不可以拔插 -->
    <bool name="config_batterySdCardAccessibility">true</bool>

     <!-- List of regexpressions describing the interface (if any) that represent tetherable
         USB interfaces.  If the device doesn't want to support tething over USB this should
         be empty.  An example would be "usb.*" -->
    <string-array translatable="false" name="config_tether_usb_regexs">
        <!-- <item>"usb\\d"</item> -->
    </string-array>

    <!-- Regex array of allowable upstream ifaces for tethering - for example if you want
         tethering on a new interface called "foo2" add <item>"foo\\d"</item> to the array -->
    <string-array translatable="false" name="config_tether_upstream_regexs">
        <!-- <item>"rmnet\\d"</item> -->
        <!-- <item>"wlan\\d"</item> -->
    </string-array>

    <!-- List of regexpressions describing the interface (if any) that represent tetherable
         Wifi interfaces.  If the device doesn't want to support tethering over Wifi this
         should be empty.  An example would be "softap.*" -->
    <string-array translatable="false" name="config_tether_wifi_regexs">
       <!--  <item>"wl0.1"</item> -->
    </string-array>

    <!-- Dhcp range (min, max) to use for tethering purposes -->
    <string-array translatable="false" name="config_tether_dhcp_range">
    </string-array>

    <!-- Boolean indicating if we require the use of DUN on mobile for tethering.
         Note that this defaults to false so that if you move to a carrier that
         hasn't configured anything tethering will still work.  If you'd rather
         make the device untetherable on unconfigured devices, set to true -->
    <bool translatable="false" name="config_tether_dun_required">false</bool>

    <!-- String containing the apn value for tethering.  May be overriden by secure settings
         TETHER_DUN_APN.  Value is a comma separated series of strings:
         "name,apn,proxy,port,username,password,server,mmsc,mmsproxy,mmsport,mcc,mnc,auth,type"
         note that empty fields can be ommitted: "name,apn,,,,,,,,,310,260,,DUN" -->
    <string translatable="false" name="config_tether_apndata"></string>


    <!-- The duration (in milliseconds) of a short animation. -->
    <integer name="config_shortAnimTime">25</integer>

    <!-- The duration (in milliseconds) of a medium-length animation. -->
    <integer name="config_mediumAnimTime">50</integer>

    <!-- The duration (in milliseconds) of a long animation. -->
    <integer name="config_longAnimTime">100</integer>

    <!-- Component name of the service providing network location support. -->
    <string name="config_networkLocationProvider">com.google.android.location.NetworkLocationProvider</string>

    <!-- Component name of the service providing geocoder API support. -->
    <string name="config_geocodeProvider">com.google.android.location.GeocodeProvider</string>

    <!-- XXXXX NOTE THE FOLLOWING RESOURCES USE THE WRONG NAMING CONVENTION.
         Please don't copy them, copy anything else. -->

    <!-- This string array should be overridden by the device to present a list of network
         attributes.  This is used by the connectivity manager to decide which networks can coexist
         based on the hardware -->
    <!-- An Array of "[Connection name],[ConnectivityManager connection type],
        [associated radio-type],[priority]  -->
    <string-array translatable="false" name="networkAttributes">
        <item>"wifi,1,1,1"</item>
        <item>"mobile,0,0,0"</item>
        <item>"mobile_mms,2,0,2"</item>
        <item>"mobile_supl,3,0,2"</item>
        <item>"mobile_dun,4,0,4"</item>
        <item>"mobile_hipri,5,0,3"</item>
    </string-array>
    
    <!-- This string array should be overridden by the device to present a list of radio
         attributes.  This is used by the connectivity manager to decide which networks can coexist
         based on the hardware -->
    <!-- An Array of "[ConnectivityManager connectionType],
                      [# simultaneous connection types]"  -->
    <string-array translatable="false" name="radioAttributes">
        <item>"1,1"</item>
        <item>"0,1"</item>
    </string-array>
    
    <string-array translatable="false" name="networkAttributes">
        <item>"wifi,1,1,1"</item>
        <item>"mobile,0,0,0"</item>
        <item>"mobile_mms,2,0,2"</item>
        <item>"mobile_supl,3,0,2"</item>
        <item>"mobile_dun,4,0,4"</item>
        <item>"mobile_hipri,5,0,3"</item>
    </string-array>

    <!-- List of regexpressions describing the interface (if any) that represent tetherable
         USB interfaces.  If the device doesn't want to support tething over USB this should
         be empty.  An example would be "usb.*" -->
    <string-array translatable="false" name="config_tether_usb_regexs">
        <item>"usb\\d"</item>
    </string-array>

    <!-- Regex array of allowable upstream ifaces for tethering - for example if you want
         tethering on a new interface called "foo2" add <item>"foo\\d"</item> to the array -->
    <string-array translatable="false" name="config_tether_upstream_regexs">
        <item>"rmnet\\d"</item>
        <item>"wlan\\d"</item>
        <item>"eth\\d"</item>
    </string-array>

    <!-- List of regexpressions describing the interface (if any) that represent tetherable
         Wifi interfaces.  If the device doesn't want to support tethering over Wifi this
         should be empty.  An example would be "softap.*" -->
    <!-- 
    <string-array translatable="false" name="config_tether_wifi_regexs">
        <item>"eth0"</item>
    </string-array>
-->

    <!-- Boolean indicating if we require the use of DUN on mobile for tethering -->
    <bool translatable="false" name="config_tether_dun_required">false</bool>

    <!-- Regex array of allowable upstream ifaces for tethering - for example if you want
             tethering on a new interface called "foo2" add <item>"foo\\d"</item> to the array -->
	     
    <!-- Flag indicating whether the we should enable the automatic brightness in Settings.
         Software implementation will be used if config_hardware_auto_brightness_available is not set -->
    <bool name="config_automatic_brightness_available">true</bool>

    <!-- Allow the menu hard key to be disabled in LockScreen on some devices -->
    <bool name="config_disableMenuKeyInLockScreen">false</bool>

    <!-- Vibrator pattern for feedback about a long screen/key press -->
    <integer-array name="config_longPressVibePattern">
        <item>0</item>
        <item>1</item>
        <item>20</item>
        <item>21</item>
    </integer-array>
    
    <!-- Vibrator pattern for feedback about touching a virtual key -->
    <integer-array name="config_virtualKeyVibePattern">
        <item>0</item>
        <item>10</item>
        <item>20</item>
        <item>30</item>
    </integer-array>

    <!-- Vibrator pattern for a very short but reliable vibration for soft keyboard tap -->
    <integer-array name="config_keyboardTapVibePattern">
        <item>40</item>
    </integer-array>

    <!-- Vibrator pattern for feedback about booting with safe mode disabled -->
    <integer-array name="config_safeModeDisabledVibePattern">
        <item>0</item>
        <item>1</item>
        <item>20</item>
        <item>21</item>
    </integer-array>

    <!-- Vibrator pattern for feedback about booting with safe mode disabled -->
    <integer-array name="config_safeModeEnabledVibePattern">
        <item>0</item>
        <item>1</item>
        <item>20</item>
        <item>21</item>
        <item>500</item>
        <item>600</item>
    </integer-array>

    <!-- Vibrator pattern for feedback about hitting a scroll barrier -->
    <integer-array name="config_scrollBarrierVibePattern">
        <item>0</item>
        <item>15</item>
        <item>10</item>
        <item>10</item>
    </integer-array>

    <!-- Vibrator pattern for feedback about on a key release -->
    <integer-array name="config_virtualKeyUpPattern">
        <item>5</item>
        <item>18</item>
    </integer-array>

    <!-- The default iface on which to monitor data use -->
    <string name="config_datause_iface">rmnet0</string>

    <!-- Disables/enables the Gingerbread electron-beam animation. -->
    <bool name="config_animateScreenLights">false</bool>

    <!-- Enable the screen-on animation -->
    <bool name="config_enableScreenOnAnimation">false</bool>

    <!-- Enable the screen-off animation -->
    <bool name="config_enableScreenOffAnimation">false</bool>

    <!-- Display low battery warning when battery level dips to this value -->
    <integer name="config_lowBatteryWarningLevel">10</integer>

    <!-- Close low battery warning when battery level reaches this value -->
    <integer name="config_lowBatteryCloseWarningLevel">15</integer>


    <!-- Array of light sensor LUX values to define our levels for auto backlight brightness support.
         The N entries of this array define N + 1 zones as follows:

         Zone 0:        0 <= LUX < array[0]
         Zone 1:        array[0] <= LUX < array[1]
         ...
         Zone N:        array[N - 1] <= LUX < array[N]
         Zone N + 1:    array[N] <= LUX < infinity

         Must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessLevels">
        <item>15</item>
        <item>51</item>
        <item>101</item>
        <item>151</item>
        <item>201</item>
        <item>400</item>
        <item>651</item>
        <item>1200</item>
        <item>2601</item>
    </integer-array>

    <!-- Array of output values for LCD backlight corresponding to the LUX values
         in the config_autoBrightnessLevels array.  This array should have size one greater
         than the size of the config_autoBrightnessLevels array.
         This must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessLcdBacklightValues">
        <item>10</item>
        <item>10</item>
        <item>15</item>
        <item>20</item>
        <item>35</item>
        <item>50</item>
        <item>65</item>
        <item>80</item>
        <item>100</item>
        <item>200</item>
    </integer-array>

    <!-- Array of output values for button backlight corresponding to the LUX values
         in the config_autoBrightnessLevels array.  This array should have size one greater
         than the size of the config_autoBrightnessLevels array.
         This must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessButtonBacklightValues">
        <item>255</item>
        <item>155</item>
        <item>105</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
    </integer-array>

    <!-- Array of output values for keyboard backlight corresponding to the LUX values
         in the config_autoBrightnessLevels array.  This array should have size one greater
         than the size of the config_autoBrightnessLevels array.
         This must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessKeyboardBacklightValues">
        <item>255</item>
        <item>155</item>
        <item>105</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
        <item>0</item>
    </integer-array>

    <!-- Boolean indicating if restoring network selection should be skipped -->
    <!-- The restoring is handled by modem if it is true-->
    <bool translatable="false" name="skip_restoring_network_selection">true</bool>
    
    <!-- ************************************************
         *                                              *
         *    GLOBAL DEFAULT VALUES FOR CM SETTINGS     *
         *                                              *
         ************************************************

         if you wanna change a behavior for your device,
         just copy that value to your overlay file and
         set it as you like -->

    <!-- these values should be default for all phone devices! -->

    <!-- toggles weather device is tablet or phone. right now,
    tablets are know to have soft buttons, but phones have harware
    buttons. this might change in the future - especially when the
    honeycomb modifications become available for phones -->
    <bool name="cm_default_is_tablet">false</bool>

    <!-- toggles weather device uses soft buttons or got hardware
    buttons. as the time of writing for android 2.3.3. all soft button
    enabled devices are tablets, all disabled are phones. -->
    <bool name="cm_default_has_soft_buttons">true</bool>

    <!-- if true, status bar is shown on bottom by default -->
    <bool name="cm_default_bottom_status_bar">false</bool>
    <!-- if true, dead zone is activated, which disables pull
    out of the status bar on the middle area - i.e. for people
    who start drag-out events accidently while trying to hit
    the space key -->
    <bool name="cm_default_use_dead_zone">false</bool>
    <!-- if true, soft buttons shown on left, false show them on
    right side of status bar -->
    <bool name="cm_default_soft_buttons_left">true</bool>

    <!-- toggle which buttons to show if soft buttons enabled
    quickna: opens notification area with the press of one button
    instead of swiping the long way up/down on big tablets -->
    <bool name="cm_default_show_soft_home">false</bool>
    <bool name="cm_default_show_soft_menu">false</bool>
    <bool name="cm_default_show_soft_back">false</bool>
    <bool name="cm_default_show_soft_search">false</bool>
    <bool name="cm_default_show_soft_quick_na">false</bool>

</resources>
